{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactPractice\\\\shopping\\\\src\\\\components\\\\pagination.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\nlet defaultProps = {\n  initialPage: 1,\n  pageSize: 10\n};\n\nclass Pagination extends Component {\n  // const { itemsData } = this.props;\n  constructor(props) {\n    super(props);\n    this.state = {\n      pager: {}\n    };\n  }\n\n  componentWillMount() {\n    // set page if items array isn't empty\n    if (this.props.itemsData && this.props.itemsData.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // reset page if items array has changed\n    if (this.props.itemsData !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    var {\n      itemsData,\n      pageSize\n    } = this.props;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(itemsData.length, page, pageSize); // get new page of items from items array\n\n    var pageOfItems = itemsData.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pageOfItems);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    const pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"page-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.currentPage - 1),\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Previous\")), pager.pages.map((page, index) => /*#__PURE__*/React.createElement(\"li\", {\n      className: \"page-item active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(page),\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, page))), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"page-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"page-link\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Next\")));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;","map":{"version":3,"sources":["E:/ReactPractice/shopping/src/components/pagination.jsx"],"names":["React","Component","PropTypes","propTypes","items","array","isRequired","onChangePage","func","initialPage","number","pageSize","defaultProps","Pagination","constructor","props","state","pager","componentWillMount","itemsData","length","setPage","componentDidUpdate","prevProps","prevState","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","totalItems","currentPage","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  initialPage: PropTypes.number,\r\n  pageSize: PropTypes.number,\r\n};\r\nlet defaultProps = {\r\n  initialPage: 1,\r\n  pageSize: 10,\r\n};\r\n\r\nclass Pagination extends Component {\r\n  // const { itemsData } = this.props;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pager: {} };\r\n  }\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    if (this.props.itemsData && this.props.itemsData.length) {\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // reset page if items array has changed\r\n    if (this.props.itemsData !== prevProps.items) {\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n  setPage(page) {\r\n    var { itemsData, pageSize } = this.props;\r\n    var pager = this.state.pager;\r\n\r\n    if (page < 1 || page > pager.totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(itemsData.length, page, pageSize);\r\n\r\n    // get new page of items from items array\r\n    var pageOfItems = itemsData.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n    // update state\r\n    this.setState({ pager: pager });\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(pageOfItems);\r\n  }\r\n  getPager(totalItems, currentPage, pageSize) {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    var startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n    // calculate start and end item indexes\r\n    var startIndex = (currentPage - 1) * pageSize;\r\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      (i) => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const pager = this.state.pager;\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n    return (\r\n      <ul className=\"pagination\">\r\n        <li className=\"page-item\">\r\n          <a\r\n            className=\"page-link\"\r\n            onClick={() => this.setPage(pager.currentPage - 1)}\r\n            href=\"#\"\r\n          >\r\n            Previous\r\n          </a>\r\n        </li>\r\n        {pager.pages.map((page, index) => (\r\n          <li className=\"page-item active\">\r\n            <a\r\n              className=\"page-link\"\r\n              onClick={() => this.setPage(page)}\r\n              href=\"#\"\r\n            >\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n        {/* <li className=\"page-item\">\r\n          <a className=\"page-link\" href=\"#\">\r\n            2\r\n          </a>\r\n        </li>\r\n        <li className=\"page-item\">\r\n          <a className=\"page-link\" href=\"#\">\r\n            3\r\n          </a>\r\n        </li> */}\r\n        <li className=\"page-item\">\r\n          <a className=\"page-link\" href=\"#\">\r\n            Next\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = propTypes;\r\nPagination.defaultProps = defaultProps;\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}